import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import OrderCard from '../components/orderCard'
import Header from '../components/header'
import MakeOffer from '../components/offerModal'
import { useDexContract } from '../hooks/useDexContract'
import { useOrdersContext } from '../context/ordersContex'
import { useState } from 'react'

const Home: NextPage = () => {

  const { orders } = useOrdersContext()
  const [isMakeOfferOpen, setIsMakeOfferOpen] = useState<boolean>(false)
  const [offerInfo, setOfferInfo] = useState({ orderIndex: 0, offerType: '' })

  const { claim, cancelOrder, fetchOrders } = useDexContract()

  //TODO filer 
  // const filer2 = (el: IOrder) => { return el.status == 'active' }
  // const orderCards = orders.filter(el => {return filer2(el)})
  // const filer1 = (el: IOrder)=>{return el.sellerAddress == '0x87e23B5D6972519b73f3d696561591018A1c2fd7'}
  const orderCards = orders

  const openOffer = (orderIndex: number, offerType: string) => {
    setOfferInfo({ orderIndex, offerType })
    setIsMakeOfferOpen(true)
  }

  return (
    <div>
      <Head>
        <title>DEX</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header></Header>

      <main className='flex flex-wrap justify-center'>
        {orderCards.map((order, index) =>
          <OrderCard
            openOffer={openOffer}
            claim={claim}
            cancelOrder={cancelOrder}
            fetchOrders={fetchOrders}
            key={index}
            orderIndex={index}
            orderId={order.orderId}
            tokenName={order.tokenName}
            description={order.description}
            sellerAddress={order.sellerAddress}
            lastBidderAddress={order.lastBidderAddress}
            tokenImageUri={order.tokenImageUri}
            startPrice={order.startPrice}
            fixedPrice={order.fixedPrice}
            actualPrice={order.actualPrice}
            status={order.status}
            endTime={order.endTime}
          ></OrderCard>
        )}
      </main>
      {isMakeOfferOpen ?
        <MakeOffer
          isMakeOfferOpen={isMakeOfferOpen}
          setIsMakeOfferOpen={setIsMakeOfferOpen}
          orderInfo={{ order: orderCards[offerInfo.orderIndex], offerType: offerInfo.offerType }} />
        : null}

      <footer className={styles.footer}>
        Made by APIFEX
      </footer>
    </div>
  )
}

export default Home
